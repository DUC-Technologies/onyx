const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

// –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ
const srcPath = path.join(__dirname, "../src");

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º i18n.t(
function getAllFilesWithI18n() {
  try {
    const result = execSync(
      'npx rg -l "i18n\\.t\\(" --type ts --type tsx --type js --type jsx',
      {
        cwd: srcPath,
        encoding: "utf8",
      }
    );
    return result.trim().split("\n").filter(Boolean);
  } catch (error) {
    console.log("No files found with ripgrep, falling back to manual search");
    return [];
  }
}

// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useTranslation —Ö—É–∫–∞
function updateFile(filePath) {
  const fullPath = path.join(srcPath, filePath);

  if (!fs.existsSync(fullPath)) {
    console.log(`File not found: ${fullPath}`);
    return false;
  }

  let content = fs.readFileSync(fullPath, "utf8");
  const originalContent = content;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
  if (filePath.includes("/i18n/") || filePath.includes("layout.tsx")) {
    console.log(`Skipping: ${filePath}`);
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ i18n.t(
  if (!content.includes("i18n.t(")) {
    return false;
  }

  console.log(`Updating: ${filePath}`);

  // 1. –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç i18n
  content = content.replace(/import i18n from ["']@\/i18n\/init["'];?\n/g, "");

  // 2. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç useTranslation, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!content.includes("useTranslation")) {
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ @/ –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
    const importMatch = content.match(/import.*from ["'][@.].*["'];?\n/);
    if (importMatch) {
      const insertIndex =
        content.indexOf(importMatch[0]) + importMatch[0].length;
      content =
        content.slice(0, insertIndex) +
        'import { useTranslation } from "@/hooks/useTranslation";\n' +
        content.slice(insertIndex);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ "use client" –µ—Å–ª–∏ –µ—Å—Ç—å
      const useClientMatch = content.match(/"use client";\s*\n/);
      if (useClientMatch) {
        const insertIndex =
          content.indexOf(useClientMatch[0]) + useClientMatch[0].length;
        content =
          content.slice(0, insertIndex) +
          'import { useTranslation } from "@/hooks/useTranslation";\n' +
          content.slice(insertIndex);
      } else {
        content =
          'import { useTranslation } from "@/hooks/useTranslation";\n' +
          content;
      }
    }
  }

  // 3. –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫
  const functionMatches = content.matchAll(
    /(?:export\s+)?(?:default\s+)?function\s+(\w+)\s*\([^{]*\)\s*\{/g
  );
  let addedHooks = new Set();

  for (const match of functionMatches) {
    const functionName = match[1];
    const functionStart = match.index;
    const openBraceIndex = content.indexOf("{", functionStart);

    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
    let insertPoint = openBraceIndex + 1;
    while (insertPoint < content.length && /\s/.test(content[insertPoint])) {
      insertPoint++;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ö—É–∫–∞ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const functionEnd = findFunctionEnd(content, openBraceIndex);
    const functionBody = content.slice(openBraceIndex, functionEnd);

    if (
      functionBody.includes("i18n.t(") &&
      !functionBody.includes("const { t } = useTranslation()") &&
      !addedHooks.has(functionName)
    ) {
      content =
        content.slice(0, insertPoint) +
        "\n  const { t } = useTranslation();" +
        content.slice(insertPoint);
      addedHooks.add(functionName);
    }
  }

  // 4. –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ i18n.t( –Ω–∞ t(
  content = content.replace(/i18n\.t\(/g, "t(");

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å
  if (content !== originalContent) {
    fs.writeFileSync(fullPath, content);
    console.log(`‚úì Updated: ${filePath}`);
    return true;
  }

  return false;
}

// –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function findFunctionEnd(content, startIndex) {
  let braceCount = 1;
  let index = startIndex + 1;

  while (index < content.length && braceCount > 0) {
    if (content[index] === "{") {
      braceCount++;
    } else if (content[index] === "}") {
      braceCount--;
    }
    index++;
  }

  return index;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log("üîç Searching for files with i18n.t() usage...");

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
  const files = getAllFilesWithI18n();

  if (files.length === 0) {
    console.log("No files found with i18n.t() usage");
    return;
  }

  console.log(`Found ${files.length} files to update`);

  let updatedCount = 0;

  files.forEach((file) => {
    if (updateFile(file)) {
      updatedCount++;
    }
  });

  console.log(`\n‚úÖ Updated ${updatedCount} files`);
  console.log("\n‚ö†Ô∏è  Please review the changes and test the application");
}

if (require.main === module) {
  main();
}

module.exports = { updateFile, getAllFilesWithI18n };





